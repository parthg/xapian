# -*- python -*-
# ex: set syntax=python:

import os

xapian_svn_root = 'svn://svn.xapian.org/xapian/'
tarball_root = "http://oligarchy.co.uk/xapian/trunk/"
tarball_root_stable = "http://oligarchy.co.uk/xapian/branches/1.2/"

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave

class MySlave(BuildSlave):
    def __init__(self, name, **kwargs):
        password = self.get_pass(name)
        BuildSlave.__init__(self, name, password, **kwargs)

    def get_pass(self, name):
        # get the password based on the name
        path = os.path.join(os.path.dirname(__file__), "%s.pass" % name)
        pw = open(path).read().strip()
        return pw

c['slaves'] = [MySlave(h, max_builds=1) for h in (
        "linux_i686_earlgrey",
        "macos_broteas",
        "gentoo_jbergstroem",
        "linux_ojwb",
	"debian_hppa_gcc61",
        "fedora_ppc64_gcc110",
	"aix_gcc111",
    )]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.

c['change_source'] = []

from buildbot.changes.svnpoller import SVNPoller
c['change_source'].append(SVNPoller(
    svnurl=xapian_svn_root,
    split_file = lambda path: ('trunk', path),
    pollinterval=60, histmax=100
))

from tarsource import TarPoller
c['change_source'].append(TarPoller(tarball_root, branch='tar', archives=('xapian-core', 'xapian-omega', 'xapian-bindings'), pollinterval=60))
c['change_source'].append(TarPoller(tarball_root_stable, branch='tar', archives=('xapian-core', 'xapian-omega', 'xapian-bindings'), pollinterval=60))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers.basic import SingleBranchScheduler
c['schedulers'] = []

c['schedulers'].append(SingleBranchScheduler(
    name="xapian_svn_quick",
    branch='trunk',
    builderNames=['xapian head update linux amd64'],
    treeStableTimer=70))

c['schedulers'].append(SingleBranchScheduler(
    name="xapian_tar",
    branch="tar",
    builderNames=['xapian tar macos', "xapian tar gentoo", "xapian tar linux ojwb", "xapian tar mingw-cross"],
    treeStableTimer=0))
c['schedulers'].append(SingleBranchScheduler(
    name="xapian_tar_weekly",
    branch="tar",
    builderNames=["xapian tar fedora ppc64", "xapian tar debian hppa", "xapian tar aix", "xapian tar aix xlc", "xapian tar gentoo nochert", "xapian tar gentoo nobrass"],
    treeStableTimer=7*24*60*60))

#c['schedulers'].append(SingleBranchScheduler(
#    name="xapian_svn_slow",
#    branch='trunk',
#    treeStableTimer=15*60))
c['schedulers'].append(SingleBranchScheduler(
    name="xapian_svn_1hr",
    branch='trunk',
    builderNames=['xapian head update log assert linux amd64',
                  'xapian head update macos',
                  'xapian head update clang linux amd64'],
    treeStableTimer=60*60))
c['schedulers'].append(SingleBranchScheduler(
    name="xapian_svn_2hr",
    branch='trunk',
    builderNames=['xapian head update glibcxxdebug linux amd64'],
    treeStableTimer=60*60))
c['schedulers'].append(SingleBranchScheduler(
    name="xapian_svn_3hr",
    branch='trunk',
    builderNames=['xapian head update linux i686'],
    treeStableTimer=3*60*60))
c['schedulers'].append(SingleBranchScheduler(
    name="xapian_svn_4h",
    branch='trunk',
    builderNames=['xapian head update assert linux amd64'],
    treeStableTimer=4*60*60))
c['schedulers'].append(SingleBranchScheduler(
    name="xapian_svn_5h",
    branch='trunk',
    builderNames=['xapian head update log linux amd64',
                  'xapian head update -Os linux amd64',
		  'stable tar assert linux amd64',
		  'stable tar log linux amd64',
		  'stable tar glibcxxdebug linux amd64',
		  'stable tar log assert linux amd64',
		  'stable tar macos',
		  'stable tar gentoo',
		  'stable tar gentoo nobrass',
		  'stable tar gentoo nochert',
		  'stable tar gentoo noflint',
		  'stable tar linux ojwb',
		  'stable tar clang linux amd64',
		  'stable tar fedora ppc64',
		  'stable tar debian hppa',
		  'stable tar aix',
		  'stable tar aix xlc',
		  'stable tar mingw-cross',
		  ],
    treeStableTimer=5*60*60))
#c['schedulers'].append(SingleBranchScheduler(
#    name="xapian_svn_veryslow4",
#    branch='trunk',
#    treeStableTimer=6*60*60))
c['schedulers'].append(SingleBranchScheduler(
    name="xapian_svn_veryslow5",
    branch='trunk',
    builderNames=['xapian head update valgrind linux amd64',
                  'xapian head update lcov linux amd64'],
    treeStableTimer=7*60*60))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from xapian_factories import *

c['builders'] = [
    {
    'name': 'xapian head update linux amd64',
    'slavename': 'linux_ojwb',
    'factory': svn_updated_factory2(xapian_svn_root, ["--without-java"]),
    'builddir': 'xapian_head_update_linux_amd64',
    },
    {
    'name': 'xapian head update assert linux amd64',
    'slavename': 'linux_ojwb',
    'factory': svn_debug_updated_factory(xapian_svn_root, ["--enable-assertions=yes", "--without-java"]),
    'builddir': 'xapian_head_update_assert_linux_amd64',
    },
    {
    'name': 'stable tar assert linux amd64',
    'slavename': 'linux_ojwb',
    'factory': tarball_updated_factory(tarball_root_stable, configure_opts=["--enable-assertions=yes", "--without-java"]),
    'builddir': 'stable_tar_assert_linux_amd64',
    },
    {
    'name': 'xapian head update log linux amd64',
    'slavename': 'linux_ojwb',
    'factory': svn_debug_updated_factory(xapian_svn_root, ["--enable-log=yes", "--without-java"]),
    'builddir': 'xapian_head_update_log_linux_amd64',
    },
    {
    'name': 'stable tar log linux amd64',
    'slavename': 'linux_ojwb',
    'factory': tarball_updated_factory(tarball_root_stable, configure_opts=["--enable-log=yes", "--without-java"]),
    'builddir': 'stable_tar_log_linux_amd64',
    },

    {
    'name': 'xapian head update glibcxxdebug linux amd64',
    'slavename': 'linux_ojwb',
    'factory': svn_debug_updated_factory(xapian_svn_root, ["CPPFLAGS=-D_GLIBCXX_DEBUG", "--without-java"]),
    'builddir': 'xapian_head_update_glibcxxdebug_linux_amd64',
    },
    {
    'name': 'stable tar glibcxxdebug linux amd64',
    'slavename': 'linux_ojwb',
    'factory': tarball_updated_factory(tarball_root_stable, configure_opts=["CPPFLAGS=-D_GLIBCXX_DEBUG", "--without-java"]),
    'builddir': 'stable_tar_glibcxxdebug_linux_amd64',
    },
 
    {
    'name': 'xapian head update log assert linux amd64',
    'slavename': 'linux_ojwb',
    'factory': svn_debug_updated_factory(xapian_svn_root, ["--enable-assertions=yes", "--enable-log=yes", "--without-java"]),
    'builddir': 'xapian_head_update_log_assert_linux_amd64',
    },
    {
    'name': 'stable tar log assert linux amd64',
    'slavename': 'linux_ojwb',
    'factory': tarball_updated_factory(tarball_root_stable, configure_opts=["--enable-assertions=yes", "--enable-log=yes", "--without-java"]),
    'builddir': 'stable_tar_log_assert_linux_amd64',
    },

    {
    'name': 'xapian head update linux i686',
    'slavename': 'linux_i686_earlgrey',
    'factory': svn_updated_factory(xapian_svn_root),
    'builddir': 'xapian_head_update_linux_i686',
    },
    {
    'name': 'xapian head update macos',
    'slavename': 'macos_broteas',
    'factory': svn_updated_factory(xapian_svn_root, usedocs=False, clean=True),
    'builddir': 'xapian_head_update_macos',
    },
    {
    'name': "xapian head update valgrind linux amd64",
    'slavename': 'linux_ojwb',
    'factory': svn_updated_valgrind_factory(xapian_svn_root, ["--without-java"]),
    'builddir': "xapian_head_update_valgrind_linux_amd64",
    },
    {
    'name': "xapian head update lcov linux amd64",
    'slavename': 'linux_ojwb',
    'factory': svn_updated_lcov_factory(xapian_svn_root),
    'builddir': "xapian_head_update_lcov_linux_amd64",
    },
    {
    'name': "xapian tar macos",
    'slavename': 'macos_broteas',
    'factory': tarball_updated_factory(tarball_root),
    'builddir': "xapian_tar_macos",
    },
    {
    'name': 'stable tar macos',
    'slavename': 'macos_broteas',
    'factory': tarball_updated_factory(tarball_root_stable),
    'builddir': 'stable_tar_macos',
    },
    {
    'name': "xapian tar gentoo",
    'slavename': 'gentoo_jbergstroem',
    'factory': tarball_updated_factory(tarball_root, configure_opts=["--without-java", "PYTHON=/usr/bin/python2"]),
    'builddir': "xapian_tar_gentoo",
    },
    {
    'name': 'stable tar gentoo',
    'slavename': 'gentoo_jbergstroem',
    'factory': tarball_updated_factory(tarball_root_stable, configure_opts=["--without-java"]),
    'builddir': 'stable_tar_gentoo',
    },
    {
    'name': "xapian tar gentoo nobrass",
    'slavename': 'gentoo_jbergstroem',
    'factory': tarball_updated_factory(tarball_root, configure_opts=["--without-java", "--disable-backend-brass"]),
    'builddir': "xapian_tar_gentoo_nobrass",
    },
    {
    'name': 'stable tar gentoo nobrass',
    'slavename': 'gentoo_jbergstroem',
    'factory': tarball_updated_factory(tarball_root_stable, configure_opts=["--without-java", "--disable-backend-brass"]),
    'builddir': 'stable_tar_gentoo_nobrass',
    },
    {
    'name': "xapian tar gentoo nochert",
    'slavename': 'gentoo_jbergstroem',
    'factory': tarball_updated_factory(tarball_root, configure_opts=["--without-java", "--disable-backend-chert"]),
    'builddir': "xapian_tar_gentoo_nochert",
    },
    {
    'name': 'stable tar gentoo nochert',
    'slavename': 'gentoo_jbergstroem',
    'factory': tarball_updated_factory(tarball_root_stable, configure_opts=["--without-java", "--disable-backend-chert"]),
    'builddir': 'stable_tar_gentoo_nochert',
    },
    {
    'name': 'stable tar gentoo noflint',
    'slavename': 'gentoo_jbergstroem',
    'factory': tarball_updated_factory(tarball_root_stable, configure_opts=["--without-java", "--disable-backend-flint"]),
    'builddir': 'stable_tar_gentoo_noflint',
    },
    {
    'name': "xapian tar linux ojwb",
    'slavename': 'linux_ojwb',
    'factory': tarball_updated_factory(tarball_root),
    'builddir': "xapian_tar_linux_ojwb",
    },
    {
    'name': 'stable tar linux ojwb',
    'slavename': 'linux_ojwb',
    'factory': tarball_updated_factory(tarball_root_stable),
    'builddir': 'stable_tar_linux_ojwb',
    },
    {
    'name': 'xapian head update -Os linux amd64',
    'slavename': 'linux_ojwb',
    'factory': svn_debug_updated_factory(xapian_svn_root, ["CFLAGS=-Os", "CXXFLAGS=-Os"]),
    'builddir': 'xapian_head_update_-Os_linux_amd64',
    },
    {
    'name': 'xapian head update clang linux amd64',
    'slavename': 'linux_ojwb',
    'factory': svn_debug_updated_factory(xapian_svn_root, ["CC=clang", "CXX=clang++"]),
    'builddir': 'xapian_head_update_clang_linux_amd64',
    },
    {
    'name': 'stable tar clang linux amd64',
    'slavename': 'linux_ojwb',
    'factory': tarball_updated_factory(tarball_root_stable, configure_opts=["CC=clang", "CXX=clang++"]),
    'builddir': 'stable_tar_clang_linux_amd64',
    },
    {
    'name': "xapian tar fedora ppc64",
    'slavename': 'fedora_ppc64_gcc110',
    'factory': tarball_updated_factory(tarball_root),
    'builddir': "xapian_tar_fedora_ppc64",
    },
    {
    'name': 'stable tar fedora ppc64',
    'slavename': 'fedora_ppc64_gcc110',
    'factory': tarball_updated_factory(tarball_root_stable),
    'builddir': 'stable_tar_fedora_ppc64',
    },
    {
    'name': "xapian tar debian hppa",
    'slavename': 'debian_hppa_gcc61',
    'factory': tarball_updated_factory(tarball_root),
    'builddir': "xapian_tar_debian_hppa",
    },
    {
    'name': "stable tar debian hppa",
    'slavename': 'debian_hppa_gcc61',
    'factory': tarball_updated_factory(tarball_root_stable),
    'builddir': "stable_tar_debian_hppa",
    },
    {
    'name': "xapian tar aix",
    'slavename': 'aix_gcc111',
    'factory': tarball_updated_factory(tarball_root),
    'builddir': "xapian_tar_aix",
    },
    {
    'name': "stable tar aix",
    'slavename': 'aix_gcc111',
    'factory': tarball_updated_factory(tarball_root_stable),
    'builddir': "stable_tar_aix",
    },
    {
    'name': "xapian tar aix xlc",
    'slavename': 'aix_gcc111',
    'factory': tarball_updated_factory(tarball_root, configure_opts=['CXX=/usr/bin/xlC', 'CC=/usr/bin/xlc']),
    'builddir': "xapian_tar_aix_xlc",
    },
    {
    'name': "stable tar aix xlc",
    'slavename': 'aix_gcc111',
    'factory': tarball_updated_factory(tarball_root_stable, configure_opts=['CXX=/usr/bin/xlC', 'CC=/usr/bin/xlc']),
    'builddir': "stable_tar_aix_xlc",
    },
    {
    'name': "xapian tar mingw-cross",
    'slavename': 'linux_ojwb',
    'factory': tarball_updated_factory(tarball_root, nocheck=True, configure_opts=["--host=i686-pc-mingw32"]),
    'builddir': "xapian_tar_mingw-cross",
    },
    {
    'name': "stable tar mingw-cross",
    'slavename': 'linux_ojwb',
    'factory': tarball_updated_factory(tarball_root_stable, nocheck=True, configure_opts=["--host=i686-pc-mingw32"]),
    'builddir': "stable_tar_mingw-cross",
    },
 
]

### FIXME: more builders...

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=8010))

# from buildbot.status import mail
# c['status'].append(mail.MailNotifier(fromaddr="buildbot@localhost",
#                                      extraRecipients=["builds@example.com"],
#                                      sendToInterestedUsers=False))
#
#from buildbot.status import words
import words # Use our own fixed version
path = os.path.join(os.path.dirname(__file__), "password.irc")
irc_password = open(path).read().strip()
c['status'].append(words.IRC(host="irc.freenode.net", nick="xapian-buildbot",
                             password=irc_password,
                             allowForce=True,
                             channels=["#xapian-devel"]))

# from buildbot.status import client
# c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'change_source' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = "debugpassword"

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole("tcp:9999:interface=127.0.0.1",
#                                       "admin", "password")


####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Xapian"
c['titleURL'] = "http://xapian.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://buildbot.xapian.org/"
